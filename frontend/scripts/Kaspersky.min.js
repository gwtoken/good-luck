(function(peppers) {
    var element = document.documentElement,
        attr = element.attributes;

    function style() {
        return getComputedStyle(element)
    }

    function trim(str) {
        return str && str.replace(/^[\s'"]|[\s'"]$/g, '')
    }
    peppers.checkMobile = peppers.checkMobile || {};
    peppers.checkMobile.css = peppers.checkMobile.css || {};
    peppers.checkMobile.css.isMobile = function() {
        return [attr["data-mobile"].value, "attr(data-mobile)"].indexOf(trim(style().content)) >= 0
    };
    peppers.checkMobile.css.isLandscape = function() {
        if (/Mobi/i.test(navigator.userAgent)) {
            return Math.abs(window.orientation) === 90 || screen.availHeight < screen.availWidth
        } else {
            return [attr["data-landscape"].value, "attr(data-landscape)"].indexOf(trim(style().content)) >= 0
        }
    }
})(peppers = peppers || {});
var peppers;
(function(peppers, navigator, window) {
    var a = navigator.userAgent || navigator.vendor || window.opera;
    peppers.checkMobile = peppers.checkMobile || {};
    peppers.checkMobile.isMobile = function() {
        return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge|maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm(os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))
    };
    peppers.checkMobile.isMobileOrTablet = function() {
        return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge|maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm(os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))
    }
})(peppers = peppers || {}, navigator, window);
var peppers;
(function($, window) {
    var $w = $(window).on("resize", onResize);
    var isMobile;
    peppers.checkMobile = peppers.checkMobile || {};
    peppers.checkMobile.css = peppers.checkMobile.css || {};
    peppers.checkMobile.css.listen = function(cb) {
        $w.on("check-mobile:change", cb);
        if (typeof isMobile != "undefined") cb(null, isMobile)
    };
    onResize();

    function onResize() {
        var _isMobile = peppers.checkMobile.css.isMobile();
        if (isMobile === _isMobile) return;
        isMobile = _isMobile;
        $w.trigger("check-mobile:change", isMobile)
    }
}(jQuery, window, peppers = peppers || {}));
var peppers;
(function(kaspersky, document, location) {
    var mainDef = $.Deferred();
    var promises = [];
    kaspersky.ready = mainDef.promise();
    kaspersky.ready.addWait = function(promise) {
        if (!promise) {
            if (arguments.length > 0) {
                return
            }
            var def = $.Deferred();
            promise = def.promise()
        }
        promises.push(promise);
        promise.done(function() {
            promises.splice(promises.indexOf(promise), 1);
            if (promises.length == 0) {
                mainDef.resolve()
            }
        });
        return def
    };
    $(document).one("page:out", function() {
        kaspersky.Transition.fadeIn()
    });
    kaspersky.ready.done(function() {
        kaspersky.Transition.fadeOut();
        var delay = kaspersky.Transition.getDelay();
        $(document).trigger("fade:start", delay);
        setTimeout(function() {
            $(document).trigger("fade:complete")
        }, delay)
    });
    $(".menu__back-btn, .to-root").attr("href", getPath("/") + "#");
    $(document.documentElement).on("click", "a", function(e) {
        if (checkLink(this) || e.isDefaultPrevented()) return true;
        e.preventDefault();
        kaspersky.navigateTo(this.href)
    });

    function checkLink(element) {
        return $(element).is("[target='_blank']") || getPath(location.href.split("#").shift()) === getPath(element.href.split("#").shift())
    }

    function getPath(path) {
        if (/^(?:\w{3,}\:\/\/|\/frontend\/)/.test(path)) return path;
        if (path.charAt(0) == "/") path = path.substr(1);
        var _href = location.href.split("#").shift().split("/");
        _href.pop();
        _href.push(path);
        return _href.join("/")
    }
    kaspersky.navigateTo = function(href) {
        if (kaspersky.Transition.opened) {
            kaspersky.Transition.fadeIn();
            setTimeout(navigate, 800)
        } else {
            navigate()
        }

        function navigate() {
            location.href = trimDomain(getPath(href))
        }
    };

    function trimDomain(path) {
        return path.replace(/^\w+:\/\/[^\/]+/, "")
    }
})(kaspersky = kaspersky || {}, document, location);
var kaspersky;
(function(peppers, location) {
    function isEqual(hash1, hash2) {
        switch (typeof hash1) {
            case "number":
            case "string":
            case "boolean":
                return hash1 === hash2;
            default:
                var p, checked = [];
                for (p in hash1) {
                    checked.push(p);
                    if (!isEqual(hash1[p], hash2[p])) return false
                }
                for (p in hash2) {
                    if (checked.indexOf(p) < 0) return false
                }
                return true
        }
    }

    function setHash(val, replace) {
        if (replace) {
            location.replace("#" + (val || '/'))
        } else {
            return location.hash = val || '/'
        }
    }

    function getHash(val) {
        return (val || location.hash).replace(/^#?\/?|\/$/, "").split("/")
    }
    peppers.hash = {
        getHash: getHash,
        isEqual: isEqual,
        setHash: setHash
    }
})(peppers = peppers || {}, window.location);
var peppers;
(function(peppers) {
    peppers.jQueryConstructor = function(name, _Class) {
        return function(params) {
            var _args = arguments;
            return this.each(function() {
                var $t = $(this);
                var instance = $t.data(name);
                if (!instance) {
                    $t.data(name, instance = new _Class($t))
                }
                if (typeof instance.init === "function") {
                    instance.init.apply(instance, _args)
                }
            })
        }
    }
})(peppers = peppers || {});
var peppers;
(function(peppers, Handlebars) {
    peppers.formatNumber = function(val) {
        var arr = [],
            str = ("" + val).replace(/\s/g, "");
        while (str.length > 0) {
            arr.unshift(str.substr(-3));
            str = str.substr(0, str.length - 3)
        }
        return arr.join(" ")
    };
    if (Handlebars) {
        Handlebars.registerHelper('formatNumber', peppers.formatNumber)
    }
})(peppers = peppers || {}, window.Handlebars);
var peppers;
(function(document, $) {
    $(document).ready(function() {
        var $t = $('.parallax__container');
        if ($t.length == 0) return;
        var ANGLE = 14;
        var startValue;
        var $b = $(document.body);
        var $h = $(document.documentElement);
        $h.mousemove(onMouseMove);
        peppers.accelerometer.on("change", onAccelerometer);
        var tweenTo = {
            beta: 0,
            gamma: 0
        };
        var tweenVal = {
            beta: 0,
            gamma: 0
        };
        var tweenTick = {
            beta: 0.05,
            gamma: 0.05
        };
        var updateFunction = onAccelerometerUpdate,
            tickFunction = tick;
        animate();

        function onAccelerometer(event) {
            console.debug("onAccelerometer", event);
            if (startValue) {
                tweenTo.beta = absMax(-(event.beta - startValue.beta) / 10, 1) * ANGLE;
                tweenTo.gamma = absMax((event.gamma - startValue.gamma) / 10, 1) * ANGLE
            } else {
                $h.off("mousemove", onMouseMove);
                startValue = {
                    beta: event.beta,
                    gamma: event.gamma
                }
            }
        }

        function onMouseMove(event) {
            var cx = Math.ceil($b.width() / 2.0);
            var cy = Math.ceil($b.height() / 2.0);
            var dx = event.pageX - cx;
            var dy = event.pageY - cy;
            tweenTo.beta = (dy / cy) * ANGLE;
            tweenTo.gamma = -(dx / cx) * ANGLE
        }

        function onAccelerometerUpdate() {
            $t.css({
                transform: 'rotate3d(1, 0, 0, ' + tweenVal.beta + 'deg) ' + 'rotate3d(0, 1, 0, ' + tweenVal.gamma + 'deg)'
            })
        }

        function tick() {
            for (var p in tweenVal) {
                tweenVal[p] += (tweenTo[p] - tweenVal[p]) * tweenTick[p]
            }
        }

        function animate() {
            requestAnimationFrame(animate);
            tickFunction();
            updateFunction(tweenVal)
        }

        function absMax(val, max) {
            max = Math.abs(max);
            if (val < -max) return -max;
            if (val > max) return max;
            return val
        }
    })
})(document, jQuery);
(function(peppers, window) {
    var listenersList = {},
        listening;
    peppers.accelerometer = {
        on: function(eventName, listener) {
            var index = getIndex(eventName, listener);
            if (index < 0 && typeof listener === "function") listenersList[eventName].push(listener);
            if (listenersList[eventName].length > 0) startListen()
        },
        off: function(eventName, listener) {
            var index = getIndex(eventName, listener);
            if (index >= 0) listenersList[eventName].splice(index, 1);
            if (listenersList[eventName].length = 0) stopListen()
        }
    };

    function stopListen() {
        if (!listening) return;
        listening = false;
        window.removeEventListener("deviceorientation", change, true);
        window.removeEventListener('devicemotion', change, true);
        window.removeEventListener("MozOrientation", change, true)
    }

    function startListen() {
        if (listening) return;
        listening = true;
        if (window.DeviceOrientationEvent) {
            window.addEventListener("deviceorientation", change, true)
        } else if (window.DeviceMotionEvent) {
            window.addEventListener('devicemotion', change, true)
        } else {
            window.addEventListener("MozOrientation", change, true)
        }
    }

    function change(event) {
        switch (event.type) {
            case "deviceorientation":
                tilt(event.beta, event.gamma);
                break;
            case "devicemotion":
                tilt(event.acceleration.x * 2, event.acceleration.y * 2);
                break;
            case "MozOrientation":
                tilt(orientation.x * 50, orientation.y * 50);
                break
        }
    }

    function tilt(beta, gamma) {
        console.debug(typeof beta);
        if (!!beta || !!gamma) {
            trigger("change", {
                beta: beta,
                gamma: gamma
            })
        }
    }

    function trigger(eventName, params) {
        for (var i = 0; listenersList[eventName] && i < listenersList[eventName].length; i++) {
            listenersList[eventName][i](params)
        }
    }

    function getIndex(event, listener) {
        var l = listenersList[event] = listenersList[event] || [];
        return l.indexOf(listener)
    }
})(peppers = peppers || {}, window);
var peppers;
(function($) {
    $.fn.pepPlaceholder = function(fn) {
        this.each(function() {
            var $t = $(this);
            var ref = $t.data("pepPlaceholder");
            if (!ref) {
                $t.data("pepPlaceholder", ref = new PepPlaceholder($t))
            }
            ref.init(fn)
        })
    };

    function PepPlaceholder($element) {
        var placeholderElement, placeholderText;

        function onInputChange(e) {
            placeholderText.toggleClass("pep-placeholder__text_hidden", e.type == 'keypress' || !!$(this).val())
        }
        this.init = function(fn) {
            this.destroy();
            var txt = initText();
            $element.wrap("<div class='pep-placeholder'></div>");
            placeholderText = $("<div class='pep-placeholder__text'>" + ($.isFunction(fn) ? fn(txt) || '' : txt) + "</div>").insertBefore($element).addClass($element.get(0).className);
            $element.addClass("pep-placeholder__input");
            placeholderElement = $element.parent();
            $element.on("keypress  keyup  change  input:empty", onInputChange)
        };
        this.destroy = function() {
            if (placeholderElement) {
                placeholderElement.after($element);
                placeholderElement.remove();
                placeholderElement = undefined
            }
            $element.removeClass("pep-placeholder__input");
            var txt = getText();
            $element.data("placeholder", "");
            $element.attr("placeholder", txt);
            $element.off("keypress  keyup  change  input:empty", onInputChange)
        };

        function initText() {
            var txt = getText();
            $element.data("placeholder", txt);
            $element.attr("placeholder", "");
            return txt
        }

        function getText() {
            return $element.attr("placeholder") || $element.data("placeholder")
        }
    }
})(jQuery);
(function(peppers) {
    function Point(x, y) {
        this.x = x;
        this.y = y
    }
    Point.prototype.subtract = function(pnt) {
        return new Point(this.x - pnt.x, this.y - pnt.y)
    };
    Point.prototype.add = function(pnt) {
        return new Point(this.x + pnt.x, this.y + pnt.y)
    };
    Point.prototype.length = function() {
        return Math.sqrt(this.x * this.x + this.y * this.y)
    };
    Point.prototype.distance = function(p1) {
        return this.subtract(p1).length()
    };
    Point.prototype.toString = function() {
        return "[Point(" + this.x + ", " + this.y + ")]"
    };
    Point.distance = function(p1, p2) {
        return p2.subtract(p1).length()
    };
    Point.prototype.clone = function() {
        return new Point(this.x, this.y)
    };
    peppers.Point = Point
})(peppers = peppers || {});
var peppers;
(function(peppers) {
    function load(url) {
        var def = $.Deferred();
        var img = $("<img/>").addClass("image-preloader");
        img.attr("crossOrigin", "Anonymous");
        img.on("load", function() {
            def.resolve(img)
        });
        img.on("error", function(e) {
            def.reject(e)
        });
        img.attr("src", url);
        $(document.body).append(img);
        return def.promise()
    }

    function getImageData(img, params) {
        var w = $(img).width();
        var h = $(img).height();
        params = params || {};
        params.width = params.width || w;
        params.height = params.height || h;
        var scale = Math.min(1, params.width / w, params.height / h);
        params.width = Math.round(w * scale);
        params.height = Math.round(h * scale);
        var canvas = document.createElement("canvas");
        canvas.width = params.width;
        canvas.height = params.height;
        var srcCtx = canvas.getContext("2d");
        srcCtx.drawImage(img.get(0), 0, 0, w, h, 0, 0, params.width, params.height);
        return {
            width: params.width,
            height: params.height,
            data: srcCtx.getImageData(0, 0, params.width, params.height).data
        }
    }
    peppers.load = load;
    peppers.getImageData = getImageData
})(peppers = peppers || {});
var peppers;
(function(kaspersky) {
    kaspersky.trimText = function(str, maxLength, maxLines) {
        maxLines = maxLines || 1;
        var res = [];
        var arr = str.split(/\r?\n/g);
        maxLength = Math.max(maxLength, str.length / maxLines);
        if (arr.length > 1) {
            for (var i = 0; i < arr.length; i++) arr.splice(i, 1, trimText(arr[i], maxLength))
        } else {
            arr = str.split(" ");
            while (arr.length > 0) {
                var line = [];
                var curLength = 0;
                do {
                    var word = arr.shift();
                    curLength += word.length;
                    line.push(word)
                } while (arr.length > 0 && curLength + arr[0].length * .5 < maxLength);
                if (arr.length > 0 && line.length > 1 && ['a', 'the', 'is', 'of'].indexOf(line[line.length - 1].toLowerCase()) >= 0) {
                    arr.unshift(line.pop())
                }
                res.push(line.join(" "))
            }
        }
        return res
    }
}(kaspersky = kaspersky || {}));
var kaspersky;
(function(kaspersky, document) {
    kaspersky.Transition = new Transition();

    function Transition() {
        var scope = this;
        var $body = $(document.body);
        var sWidth = Math.max($body.width(), screen.width);
        var sHeight = Math.max($body.height(), screen.height);
        var $wrapper = $(".transition-wrapper");
        if ($wrapper.length == 0) {
            $wrapper = $("<div class='transition-wrapper'>");
            $body.append($wrapper)
        }
        var ow = 100;
        var oh = 86.55;
        var width = sWidth / 10 + 1;
        var height = ow / oh * width + 1;
        var pieces = [],
            timing = {};
        var yy = 0;
        var xx = 0;
        for (var y = -height / 2; y < sHeight + height / 2; y += height * .75 - 1) {
            xx = 0;
            for (var x = -width / 2; x < sWidth + width / 2; x += width - 1) {
                var $i = $("<div class='transition-hexagon-bg'><div class='transition-hexagon'>");
                pieces.push($i);
                $wrapper.append($i);
                var is_odd = yy % 2 == 0;
                $i.css({
                    width: width + "px",
                    height: height + "px",
                    left: (x - (is_odd ? width / 2 : 0)) + "px",
                    top: y + "px"
                });
                xx++
            }
            yy++
        }
        $("<div></div>").addClass("transition__preloader").appendTo($wrapper);
        $wrapper.addClass("transition-wrapper_initialized");
        this.opened = false;
        this.fadeIn = function() {
            this.opened = false;
            $.each(pieces, toggle(true, timing))
        };
        this.fadeOut = function() {
            this.opened = true;
            $.each(pieces, toggle(false, timing));
            $wrapper.addClass("transition-wrapper_fade-out")
        };
        this.getDelay = function() {
            return 800 + timing.delay
        }
    }

    function toggle(val, timing) {
        timing.delay = 0;
        return function() {
            var $t = $(this);
            var _delay = Math.round(Math.random() * 30 * 20);
            timing.delay = Math.max(timing.delay, _delay);
            setTimeout(function() {
                $t.toggleClass("transition-hexagon_a-out", !val).toggleClass("transition-hexagon_a-in", val)
            }, _delay)
        }
    }
})(kaspersky = kaspersky || {}, document);
var kaspersky;
(function(document) {
    $(document.documentElement).on("change", ".checkbox-nth", onCheckboxChange);

    function onCheckboxChange() {
        var cont = $(this).parent();
        var list = cont.find(".checkbox-nth");
        var index = list.index(this);
        var items = cont.find(".checkbox-nth-item");
        items.off("checkbox:change");
        var item = items.eq(index).on("checkbox:change", onItemChange);
        var container = cont.find(".checkbox-nth-container");
        container.css({
            height: item.outerHeight() + parseInt(container.css('paddingTop')) + parseInt(container.css('paddingBottom'))
        });
        setTimeout(function() {
            var container = cont.find(".checkbox-nth-container");
            container.css({
                height: item.outerHeight() + parseInt(container.css('paddingTop')) + parseInt(container.css('paddingBottom'))
            })
        }, 50);

        function onItemChange() {
            container.css("height", $(this).outerHeight() + parseInt(container.css('paddingTop')) + parseInt(container.css('paddingBottom')))
        }
    }
})(document);
var peppers;
var btn = $(".mute-btn_false");
var cont = btn.find("label");
var interval;
var list = [1, 2, 3, 7, 18, 11, 25, 13, 26, 47, 26, 18, 25, 11, 18, 7, 3, 2, 1];
var lines = [];
var sound = $(".sound", top.document);
for (var i = 0; i < list.length; i++) {
    var line = $("<span></span>").addClass("mute-btn__line");
    lines.push(line);
    line.appendTo(cont).after(" ").css("height", list[i] / .47 + "%")
}
var duration = getDuration(getComputedStyle(line.get(0)));
var isMobile = peppers.checkMobile.css.isMobile();
if (isMobile) {
    $.cookie("muted", 1, {
        path: "/",
        expires: 3650
    })
}
btn.find(".mute-btn__checkbox").change(onChange).prop("checked", 1 === parseInt($.cookie("muted"))).change();

function onChange() {
    clearInterval(interval);
    var mute = $(this).is(":checked");
    if (!mute) {
        interval = setInterval(tick, duration);
        tick()
    }
    toggle(mute);
    $.cookie("muted", mute ? 1 : 0, {
        path: "/",
        expires: 3650
    });
    var sound_elem = $('.sound').get(0);
    if (typeof localStorage['sound_progress'] !== 'undefined') {
        sound_elem.currentTime = parseFloat(localStorage['sound_progress'])
    }
    sound_elem.ontimeupdate = function() {
        localStorage['sound_progress'] = sound_elem.currentTime
    }
}

function toggle(mute) {
    if (!mute) {
        sound.get(0).play()
    } else {
        sound.get(0).pause()
    }
}

function tick() {
    var fn = getFunction();
    for (var i = 0; i < lines.length; i++) {
        lines[i].css("height", fn(i / (lines.length - 1)) * 100 + "%")
    }
}

function getPrefixed(name, prefix) {
    return !prefix ? name : prefix + name[0].toUpperCase() + name.substr(1)
}

function getDuration(style) {
    var prefixes = ["", "webkit", "moz", "ms", "o"];
    var d;
    for (var i = 0; !d && i < prefixes.length; i++) {
        d = style[getPrefixed("transitionDuration", prefixes[i])]
    }
    var res = /((?:\d*\.)?\d+)(m?s)/.exec(d || "0s");
    var value = parseFloat(res[1]);
    switch (res[2]) {
        case "s":
            return value * 1000;
        default:
        case "ms":
            return value
    }
}

function getFunction() {
    var list = [];
    var n = 1 + 6 * Math.random();
    var offset = Math.random() * 2 * Math.PI;
    while (list.length < n) {
        list.push(getComponent(offset))
    }
    return function(value) {
        var result = 0;
        for (var i = 0; i < list.length; i++) {
            result += list[i](value)
        }
        return .5 + .5 * (result / list.length)
    }
}

function getComponent(offset) {
    var scale = Math.floor(1 + 3 * Math.random()) * 2 * Math.PI;
    return function(val) {
        return Math.sin(offset + val * scale)
    }
}
var peppers;
(function(kaspersky, Handlebars, document, $, TweenLite) {
    var SHOW = 'show',
        HIDE = 'hide',
        EVENT = "item:select",
        REMOVE = "item:remove";
    var template, script;
    $.fn.earthPopupItem = function(action) {
        return this.each(function(index, el) {
            var $t = $(this);
            var itm = $t.data("earthPopupItem");
            console.log("earthPopupItem", action, itm);
            if (!itm) {
                $t.data("earthPopupItem", itm = new EarthPopupItem($t, index))
            }
            itm.init(action)
        })
    };

    function EarthPopupItem($t, index) {
        $t.click(function() {
            $t.trigger(EVENT, index)
        });
        var _preview = $t.find(".earth-popup__preview-hexagon"),
            _shadow = $t.find(".earth-popup__item-shadow"),
            _flag = $t.find(".earth-popup__flag-hexagon"),
            _flagBorder = $t.find(".hexagon-svg"),
            _city = $t.find(".earth-popup__city"),
            _briefs = $t.find(".earth-popup__briefs-count");
        console.log("弹出的图片DIV", _preview);
        this.init = function(action) {
            switch (action) {
                case SHOW:
                    show();
                    break;
                case HIDE:
                    hide();
                    break
            }
        };

        function show() {
            var delay = .15 * index;
            _show(_preview, delay, 0.5);
            _show(_shadow, delay, 0.5);
            _show(_flag, delay + .25, 0.3);
            _show(_flagBorder, delay + .45, 0.3);
            _show(_city, delay + .35, 0.2);
            _show(_briefs, delay + .40, 0.2);
            console.log("showItem")
        }

        function _show(target, delay, duration, from, to) {
            target.css("transform", from || "scale(0)");
            TweenLite.to(target.get(0), duration || .500, {
                transform: to || "scale(1)",
                delay: delay
            })
        }

        function hide() {
            console.log("hideItem");
            TweenLite.to($t.get(0), 0.01, {
                transform: "scale(1)",
                onComplete: function() {
                    $t.trigger(REMOVE)
                }
            })
        }
    }
    kaspersky.getHexaspherePopup = function(data, onClick) {
        var collection, items;
        if (!template) {
            script = $("#earth-popup[type='text/x-handlebars-template']");
            template = Handlebars.compile(script.html())
        }
        collection = $(template(data)).appendTo(script.parent());
        collection.localization("en");
        items = collection.find(".earth-popup__item").on(EVENT, function(event, index) {}).on(REMOVE, function() {
            collection.remove();
            collection = undefined;
            items = undefined
        }).earthPopupItem(SHOW);
        return {
            "element": collection.get(0),
            "action": function(action) {
                collection && collection.toggleClass("earth-popup_moving", action === true || action === "mousedown")
            },
            "close": function() {
                console.log("currentClose");
                if (items) {
                    items.earthPopupItem(HIDE)
                }
                items = undefined
            }
        }
    }
})(kaspersky = kaspersky || {}, Handlebars, document, jQuery, TweenLite);
var kaspersky, peppers;
var peppers, kaspersky;
(function($, window, peppers, kaspersky) {
    $.fn.alert = peppers.jQueryConstructor("alert", Alert);

    function Alert($element) {
        var _hash;
        var self = this;
        var _head, _body;
        var $head = $element.find(".modal-message__title");
        var $body = $element.find(".modal-message__body");
        $(window).on("hashchange", checkHash);
        $element.find(".button_no-lines").on("click", onModalClose);

        function onModalClose(e) {
            e.preventDefault();
            $element.trigger("modal:hide")
        }
        kaspersky.alert = function(head, body, onClose) {
            if (head == 'already voted: agree') {
                head = $.fn.localization.getText("voted.agree") || 'already voted: agree'
            } else if (head == 'already voted: disagree') {
                head = $.fn.localization.getText("voted.disagree") || 'already voted: disagree'
            }
            self.init(head, body);
            peppers.modal("alert", onClose || location.hash)
        };

        function checkHash() {
            if (!(_head || _body) && peppers.hash.getHash()[1] === "alert") {
                peppers.modal()
            }
        }
        this.init = function(head, body) {
            $head.html(_head = head || '');
            $body.html(_body = body || '');
            checkHash()
        }
    }
}(jQuery, window, peppers = peppers || {}, kaspersky = kaspersky || {}));
var peppers;
(function($, Handlebars) {
    var text = {},
        waitAPI = {};
    var localizations = [];
    var _api, currentText;
    $.fn.localization = function(lang, api) {
        if (lang === "destroy") {
            return
        }
        lang = lang || 'en';
        var def = $.Deferred();
        var self = this;
        if (api) _api = api;
        if (_api || text[lang]) {
            text[lang] = text[lang] || _api(lang, initLocalization);
            if (waitAPI[lang]) {
                waitAPI[lang].resolve(text[lang])
            }
            text[lang].done(changeText)
        } else {
            if (!waitAPI[lang]) waitAPI[lang] = $.Deferred();
            waitAPI[lang].then(initText)
        }

        function initText(v) {
            v.done(changeText)
        }

        function changeText(data) {
            currentText = data;
            self.find("[data-localization]").each(function() {
                localizations.push(new Localization(this, data))
            });
            def.resolve()
        }
        return def.promise()
    };
    $.fn.localization.getText = function(name, lang) {
        if (currentText) {
            return getData(currentText, name)
        }
    };

    function initLocalization(data) {
        return deep(data);

        function deep(object) {
            var res = {};
            for (var p in object) {
                var path = p.split("_");
                var obj = res;
                var nextName = getName(path[0]);
                for (var i = 0; i < path.length - 1; i++) {
                    var name = nextName;
                    nextName = getName(path[i + 1]);
                    obj = obj[name] = obj[name] || (!/^\d+$/.test(nextName) ? {} : [])
                }
                obj[nextName] = object[p]
            }
            return res
        }

        function getName(str) {
            return str.replace(/[A-Z]/g, function() {
                return "_" + arguments[0].toLowerCase()
            })
        }
    }

    function Localization(element, data) {
        var $el = $(element);
        var info = getData(data, $el.data("localization"));
        if (typeof info === "undefined") return;
        if (info.hasOwnProperty("attr")) {
            $el.attr(info.attr)
        }
        if (["string", "number"].indexOf(typeof info) >= 0) {
            $el.html(info)
        } else if (info.hasOwnProperty("length")) {
            $el = initArray()
        } else if (info.hasOwnProperty("desktop") || info.hasOwnProperty("mobile")) {
            initAdaptive()
        }

        function initAdaptive() {
            $el.html("<span class='mobile-only'>" + info.mobile + "</span>" + "<span class='desktop-only'>" + info.desktop + "</span>")
        }

        function initArray() {
            if ($el.is("script")) {
                var template = $el.html()
            } else {
                template = "{{#each this}}" + $el.get(0).outerHTML + "{{/each}}";
                var remove = true
            }
            var result = Handlebars.compile(template)(info);
            $el.after(result);
            if (remove) {
                $el.remove();
                $(result).removeAttr("data-localization")
            }
        }
    }

    function getData(data, name) {
        var path = name.split(".");
        while (data && path.length > 0) {
            data = data[path.shift()]
        }
        return data
    }
})(jQuery, window.Handlebars);
(function($, TweenLite, RoughEase, Power0) {
    $.fn.welcome = function() {
        var durations = [1, 6, 3];
        var self = this;
        var $def = $.Deferred();
        if ((this.length === 0 || $.cookie("visited"))) {
            done()
        } else {
            $.cookie("visited", "1", {
                "expires": 3650,
                "path": "/"
            });
            var text = this.find(".welcome__text").each(function() {
                var $t = $(this).children();
                var txt = $t.html();
                txt = txt.split("").map(function(itm) {
                    return "<span  class='welcome__l'>" + itm + "</span>"
                });
                $t.html(txt.join(""))
            });
            show(0, 1)
        }
        var _skip;
        this.on("click", function() {
            _skip()
        });
        return $def.promise();

        function done() {
            self.remove();
            $def.resolve()
        }

        function show(mIndex, delay) {
            var isSkipped;
            _skip = skip;
            if (mIndex >= text.length) {
                self.fadeOut(done);
                return
            }
            var _message = text.eq(mIndex).show();
            var _letters = _message.find(".welcome__l");
            delay = delay || 0;
            _letters.css("opacity", 0).each(animate(1, .5, delay, 0.025, onShow));

            function onShow(skip) {
                if (skip !== true && isSkipped) return;
                var _duration = skip === true ? 0 : text.data("duration") - 0;
                _letters.each(animate(0, 1, _duration || _duration === 0 ? _duration : durations[mIndex] || 1, .0, onHide))
            }

            function onHide() {
                show(++mIndex, .2)
            }

            function skip() {
                if (isSkipped) return;
                _letters.each(function() {
                    TweenLite.killTweensOf(this)
                });
                isSkipped = true;
                onShow(true)
            }
        }

        function animate(opacity, duration, delay, dDelay, onComplete) {
            var count = 0;
            return function(index) {
                count++;
                TweenLite.to(this, duration, {
                    opacity: opacity,
                    delay: delay + dDelay * index,
                    ease: RoughEase.ease.config({
                        template: Power0.easeNone,
                        strength: 2,
                        points: 10,
                        taper: "none",
                        randomize: true,
                        clamp: true
                    }),
                    onComplete: function() {
                        if (--count === 0 && typeof onComplete === "function") {
                            onComplete()
                        }
                    }
                })
            }
        }
    }
}(jQuery, TweenLite, RoughEase, Power0));
(function(peppers, kaspersky, window, document, $, location, Handlebars) {
    var _wait = kaspersky.ready.addWait();
    var $document = $(document);
    var $window = $(window);
    var $html = $(document.documentElement);
    var $body = $(document.body);
    var apiCache = {};
    $document.ready(onReady);

    function onReady() {
        kaspersky.planetMain && kaspersky.planetMain(api("locations"), api("location"));
        var lang = 'en';
        if (typeof php_passed_lang !== 'undefined') {
            lang = php_passed_lang
        }
        kaspersky.ready.addWait($(document.body).localization(lang, api("localization")));
        _wait.resolve();
        kaspersky.ready.done(function() {
            initWelcome();
            $(window).trigger("hashchange").resize()
        })
    }

    function MetaZoom(event) {
        this.toggleZoom = toggleZoom;

        function toggleZoom(event) {
            kaspersky.alert("toggle zoom " + event.type);
            var _p = parse();
            switch (event.type) {
                case "blur":
                    _p["minimum-scale"] = "1";
                    break;
                case "focus":
                    delete _p["minimum-scale"];
                    break
            }
            write(_p)
        }

        function getViewportMeta() {
            return $("meta[name='viewport']")
        }

        function write(params) {
            var list = [];
            for (var p in params) {
                if (params.hasOwnProperty(p)) {
                    list.push(p + "=" + params[p])
                }
            }
            getViewportMeta().attr("content", list.join(", "))
        }

        function parse() {
            var hash = {};
            var str = getViewportMeta().attr("content");
            var list = str.split(/\s*,\s*/g);
            for (var i = 0; i < list.length; i++) {
                var param = list[i].split("=");
                list[i] = {
                    key: param[0],
                    value: param[1]
                };
                hash[list[i].key] = hash[list[i].value]
            }
            return hash
        }
    }

    function api(method, filter, cache, defaultRequestMethod, async) {
        var _track = {
            "agree": GA('send', 'event', 'Button1', 'Click2'),
            "work-add_like": GA('send', 'event', 'Button2', 'Click')
        };
        var methods = {
            "location": "location/{location_id}",
            "locations": "locations",
            "localization": "localization",
        };
        var request = post,
            _api = "",
            url;
        var raw = method == 'work-save';
        url = _api + "/backend/api/v1/" + (methods.hasOwnProperty(method) ? methods[method] : "");
        if (method == "locations") {
            url = "assets/earth/locations.json"
        }
        if (method == "localization") {
            url = "assets/earth/localization.json"
        }

        function testRequest(url, params, requestMethod) {
            return $.get("api_example/" + method + ".json")
        }

        function useTestAPI(method) {
            var _testAPI = $.cookie("test_api");
            if (_testAPI === "1") return true;
            try {
                var list = JSON.parse(_testAPI);
                for (var i = 0; i < list.length; i++) {
                    if (list[i].name === method) return list[i].value == "1"
                }
            } catch (err) {}
            return false
        }

        function post(url, params, requestMethod, raw) {
            raw = raw || false;
            if ((typeof async) === 'undefined') {
                async = true
            } else {
                async = Boolean(async)
            }
            var xhrOptions = {
                method: requestMethod || "GET",
                async: async
            };
            if (raw) {
                var data = new FormData();
                for (key in params) {
                    if (!params.hasOwnProperty(key)) {
                        continue
                    }
                    data.append(key, params[key])
                }
                xhrOptions.processData = false;
                xhrOptions.contentType = false;
                xhrOptions.cache = false;
                xhrOptions.data = data
            } else {
                xhrOptions.data = params
            }
            var xhr = $.ajax(url, xhrOptions);
            xhr.then(function(data) {
                if (data._token) {
                    $.ajaxSetup({
                        headers: {
                            'X-CSRF-TOKEN': data._token
                        }
                    })
                }
                return data
            });
            return xhr
        }
        return function(params, requestFilter, requestMethod) {
            var _url = url;
            if (method === "localization") {
                params = undefined
            }
            if (apiCache.hasOwnProperty(_url)) return apiCache[_url];
            if (params && methods[method]) {
                _url = _url.replace(/\/\{([^\}]+)\}/g, function() {
                    var name = arguments[1];
                    if (params.hasOwnProperty(name)) {
                        var value = params[name];
                        delete params[name];
                        return value ? "/" + value : ""
                    }
                    return ""
                })
            }
            var _params;
            switch (typeof params) {
                case "object":
                    for (var p in params) {
                        if (params.hasOwnProperty(p)) {
                            _params = params;
                            break
                        }
                    }
                    break;
                default:
                    _params = params;
                    break
            }
            var def = $.Deferred();
            var promise = def.promise();
            (!useTestAPI(method) ? request : testRequest)(_url, _params, requestMethod || defaultRequestMethod || (_params ? "post" : "get"), raw).then(function(data) {
                return method !== "localization" ? checkImagesUrl(data) : data
            }).then(filter).then(requestFilter).done(function(data) {
                checkResponse(data)
            }).fail(function(jqXHR) {
                if (jqXHR.responseJSON) {
                    checkResponse(jqXHR.responseJSON)
                } else {
                    def.reject(jqXHR.message || jqXHR.responseText || "ERROR")
                }
            });

            function checkImagesUrl(data, isImage) {
                for (var p in data) {
                    if (data.hasOwnProperty(p)) {
                        if (isImage || /^(?:image|photo|preview|flag|url)s?$/.test(p)) {
                            switch (typeof data[p]) {
                                case "string":
                                    if (/^backend\//.test(data[p])) {
                                        data[p] = "/" + data[p]
                                    }
                                    break;
                                case "object":
                                    checkImagesUrl(data[p], true);
                                    break
                            }
                        } else if (typeof data[p] === "object") {
                            checkImagesUrl(data[p])
                        }
                    }
                }
                return data
            }

            function checkResponse(data) {
                switch (true) {
                    case typeof data === "string":
                        def.reject(data);
                        break;
                    case data.success === false:
                        var msg = data.text || data.message || data.error;
                        def.reject(msg);
                        break;
                    case data.hasOwnProperty("error"):
                        def.reject(data.text || data.error);
                        break;
                    case data.hasOwnProperty("errors"):
                        var message = [];
                        for (var p in data.errors) {
                            message.push(data.errors[p].join(", "))
                        }
                        def.reject(message.join("<br>"));
                        break;
                    case data[0] && data[0].success === false:
                        def.reject(data[0].message);
                        break;
                    default:
                        trackSuccess();
                        def.resolve(data);
                        break
                }
            }
            if (cache === true) {
                apiCache[url] = promise;
                promise.fail(function() {
                    delete apiCache[url]
                })
            }
            return promise
        };

        function trackSuccess() {
            if (_track.hasOwnProperty(method)) {
                _track[method]()
            }
        }

        function GA() {
            var args = arguments;
            return function() {
                if (typeof ga === "function") {
                    ga.apply(window, args)
                }
            }
        }
    }

    function initWindowResizeListener() {
        var lastHeight, isFocused;
        $window.resize(onResize);
        $(document.body).on("vr:change", doResize);
        var isPortrait;

        function onResize() {
            requestAnimationFrame(doResize)
        }

        function doResize() {
            var w = $window.width(),
                h = $window.height();
            var isLandscape = typeof isPortrait === "boolean" ? !isPortrait : peppers.checkMobile.css.isLandscape();
            if ($body.is(".is_vr")) isLandscape = !isLandscape;
            var isMobile = peppers.checkMobile.css.isMobile();
            var rect = {};
            switch (true) {
                case isLandscape:
                    rect = {
                        w: 1135,
                        h: 640
                    };
                    break;
                case isMobile:
                case peppers.checkMobile.isMobileOrTablet():
                    rect = {
                        w: 640,
                        h: 1135
                    };
                    break;
                default:
                    rect = {
                        w: 1280,
                        h: 720
                    };
                    break
            }
            $html.css("fontSize", 18 * Math.min(1, w / rect.w));
            $html.toggleClass("landscape", isLandscape);
            var size = {
                width: w,
                height: h
            };
            $html.data("size", size).trigger("resize:after", size);
            toggleClass("data-mobile-class", isMobile);
            toggleClass("data-desktop-class", !isMobile);

            function toggleClass(data, active) {
                $("[" + data + "]").each(function() {
                    var $t = $(this);
                    $t.toggleClass($t.attr(data), active)
                })
            }
        }
    }

    function initGlobeHelper() {
        if (!$.cookie("visited-2")) {
            var help = $(".help").fadeIn();
            help.parent().on("mousedown  touchstart", hideHelp)
        }

        function hideHelp() {
            $.cookie("visited-2", "1", {
                "expires": 3650,
                "path": "/"
            });
            $(this).off("mousedown  touchstart", hideHelp);
            $(".help").fadeOut()
        }
    }

    function initWelcome() {
        $(".welcome").welcome().done(initGlobeHelper)
    }
})(peppers = peppers || {}, kaspersky = kaspersky || {}, window, document, jQuery, window.location, Handlebars);
document.addEventListener("DOMContentLoaded", function(event) {
    var gdprStrings = {
        text: 'We use cookies to make your experience of our websites better. By using and further navigating this website you accept that some of your browsing activity can be recorded in cookies. Detailed information about the use of cookies on this website is available by clicking on <a href="https://www.kaspersky.com/web-privacy-policy" target="_blank">more information</a>. ',
        button: 'Accept ',
    };
    if (localStorage['language'] === 'ru') {
        var gdprStrings = {
            text: 'Мы используем файлы cookie, чтобы улучшить работу сайта. Продолжая пользоваться этим сайтом, вы соглашаетесь, что некоторые из ваших действий в браузере будут записаны в файлы cookie. Подробную информацию об использовании файлов cookie на этом сайте вы можете найти по ссылке <a href="https://www.kaspersky.ru/web-privacy-policy" target="_blank">узнать больше</a>. ',
            button: 'Принять ',
        }
    }

    function getCookie(name) {
        var matches = document.cookie.match(new RegExp("(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"));
        return matches ? decodeURIComponent(matches[1]) : undefined
    }
    var gdprAgreed = getCookie('cookie_accepted')
    function setCookie(name, value, options) {
        options = options || {};
        var expires = options.expires;
        if (typeof expires == "number" && expires) {
            var d = new Date();
            d.setDate(d.getDate() + expires);
            expires = options.expires = d
        }
        if (expires && expires.toUTCString) {
            options.expires = expires.toUTCString()
        }
        value = encodeURIComponent(value);
        var updatedCookie = name + "=" + value;
        for (var propName in options) {
            updatedCookie += "; " + propName;
            var propValue = options[propName];
            if (propValue !== true) {
                updatedCookie += "=" + propValue
            }
        }
        document.cookie = updatedCookie
    }
})